pub const FONT_SET: [u8; 80] = [
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80  // F
];

#[derive(Default)]
pub struct Keyboard {
    pub pressed_keys: [bool; 16],
}

impl Keyboard {
    pub fn new() -> Keyboard {
        Default::default()
    }

    pub fn clear(&mut self) {
        self.pressed_keys = [false; 16];
    }

    pub fn is_key_pressed(&mut self, key: u8) -> bool {
        self.pressed_keys[key as usize]
    }

    pub fn key_down(&mut self, key: u8) {
        self.pressed_keys[key as usize] = true
    }

    pub fn key_up(&mut self, key: u8) {
        self.pressed_keys[key as usize] = false;
    }
}